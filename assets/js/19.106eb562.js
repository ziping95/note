(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{242:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),a("h2",{attrs:{id:"锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),a("p",[t._v("由于多个线程对同一个对象进行写操作，其必然出现资源争抢，引发线程安全问题，而锁就是为了解决这种问题而诞生的，java中如下几种锁")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("自旋锁：为了不放弃CPU执行事件，循环使用"),a("code",[t._v("CAS")]),t._v("技术对数据更新，直至成功，使用"),a("code",[t._v("while(true)")]),t._v("方式循环"),a("code",[t._v("CAS")]),t._v("操作为自旋锁的典型实现")]),t._v(" "),a("li",[t._v("悲观锁：在执行前假定会发生冲突，所以从读取数据开始就对行为上锁，参考"),a("code",[t._v("synchronized")]),t._v("关键字")]),t._v(" "),a("li",[t._v("乐观锁：提出了版本的概念，在读取数据时，会将当前数据版本号一并读出来，每次写时候会对版本进行修改，其他线程写的时候，会先判断当前版本号和读取时是否一致，一致才会进行写入")]),t._v(" "),a("li",[t._v("独享锁（写）：给资源加上写锁，线程可以修改资源，其他线程不能再加锁，"),a("code",[t._v("synchronized")]),t._v("也属于这种")]),t._v(" "),a("li",[t._v("共享锁（读）：给资源加上读锁，其他线程也只能加读锁，不能加写锁")]),t._v(" "),a("li",[t._v("可重入锁、不可重入锁：线程拿到一把锁后，可以自由进入同一把锁所同步的其他代码，"),a("code",[t._v("synchronized")]),t._v("属于可重入锁")]),t._v(" "),a("li",[t._v("公平锁、非公平锁：争抢锁的顺序，按照先来后到的顺序")])])]),t._v(" "),a("p",[t._v("Java中有几种重要的锁实现方式："),a("code",[t._v("synchronized")]),t._v("，"),a("code",[t._v("ReentrantLock")]),t._v("，"),a("code",[t._v("ReentrantReadWriteLock")])]),t._v(" "),a("h3",{attrs:{id:"同步关键字synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步关键字synchronized"}},[t._v("#")]),t._v(" 同步关键字"),a("code",[t._v("synchronized")])]),t._v(" "),a("p",[t._v("这属于java中最基本的线程通信机制，基于对象监视器实现，上面介绍过属于可重入，独享，悲观锁类型，在使用时，可用于方法（静态/非静态），同步代码块，同时由于"),a("code",[t._v("Happens-Before")]),t._v("规则的存在，"),a("code",[t._v("synchronized")]),t._v("也可以用来保证可见性")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("锁失效问题")]),t._v(" "),a("p",[a("code",[t._v("synchronized")]),t._v("在非静态方法上，监视器所监视的对象为当前对象"),a("code",[t._v("this")]),t._v("，因此如果多个线程是通过不同对象调用该方法时，同步作用失效。静态方法由于是监视类对象，因此不存在该问题")])]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("synchronized")]),t._v("关键字中，有一种场景为"),a("code",[t._v("锁粗化")]),t._v("，意思为，如果一段代码被频繁调用执行，而这段代码中有两个以上的"),a("code",[t._v("synchronized")]),t._v("并且对象锁是同一个时，在"),a("code",[t._v("JIT")]),t._v("判断是否属于热点代码，若是，则会将两个锁合并为一个使用。\n例如下代码")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Java代码执行过程")]),t._v(" "),a("ol",[a("li",[t._v("源代码经javac编译成字节码，class文件")]),t._v(" "),a("li",[t._v("程序字节码经过"),a("code",[t._v("JIT")]),t._v("环境变量进行判断，是否属于“热点代码”（多次调用的方法，或循环等），若是，走JIT编译为具体硬件处理器（如sparc、intel）机器码，若不是，则直接由解释器解释执行")]),t._v(" "),a("li",[t._v("操作系统及类库调用")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果"),a("code",[t._v("JIT")]),t._v("判断出以上代码在项目中存在多次调用，会自动将以上代码优化为")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("还有一种情况为"),a("code",[t._v("锁消除")]),t._v("，同样属于"),a("code",[t._v("JIT")]),t._v("优化后的结果，我们都知道"),a("code",[t._v("StringBuffer")]),t._v("是线程安全的，其"),a("code",[t._v("append")]),t._v("方式就是使用了"),a("code",[t._v("synchronized")]),t._v("修饰")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" stringBuffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        stringBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        stringBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        stringBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("由于这段代码使用的是局部变量，不会存在线程安全问题，因此"),a("code",[t._v("JIT")]),t._v("会在编译期将其内部的"),a("code",[t._v("synchronized")]),t._v("关键字消除")]),t._v(" "),a("p",[a("code",[t._v("synchronized")]),t._v("实际会修改对象头中的一个标志位来表明当前对象状态，其加锁过程会经历 "),a("strong",[t._v("偏向锁--\x3e轻量级锁（CAS操作修改标志位）--\x3e重量级锁（Monitor监视器）")]),t._v("，偏向锁可以在启动时通过参数关闭")]),t._v(" "),a("p",[t._v("偏向锁，仅仅是第一次有用（实际就是无锁，因为没有出现资源争抢），只要当前对象出现过争抢资源时，就会变成轻量级锁。")]),t._v(" "),a("p",[t._v("轻量级锁，通过不断的自旋判断当前对象是否有锁，若没锁，则绑定当前线程（加锁），如果有锁就会不断的自旋进行"),a("code",[t._v("CAS")]),t._v("，但自旋会消耗过多的性能，达到一定次数后，该对象会升级成重量级锁，进入阻塞")]),t._v(" "),a("h3",{attrs:{id:"reentrantlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock"}},[t._v("#")]),t._v(" ReentrantLock")]),t._v(" "),a("p",[a("code",[t._v("ReentrantLock")]),t._v("是"),a("code",[t._v("Lock")]),t._v("接口的一个实现类，具有独享，可重入特性，并且支持公平锁、非公平锁两种模式")]),t._v(" "),a("p",[t._v("在使用时，通过"),a("code",[t._v("lock.lock()")]),t._v("加锁，通过"),a("code",[t._v("lock.unlock()")]),t._v("解锁。")]),t._v(" "),a("p",[t._v("值得注意的是，在加锁的同时，会修改锁内的一个计数标志位，记录当前获取锁的次数，如果执行了两次"),a("code",[t._v("lock.lock()")]),t._v("，则对应的计数为2，且在释放锁时，也必须进行两次"),a("code",[t._v("lock.unlock()")]),t._v("解锁，否则其他线程依旧拿不到这把锁")]),t._v(" "),a("p",[t._v("另外，如果线程在获取锁的时候被阻塞住了，并且我们想手动中断这个被阻塞的线程，则必须使用"),a("code",[t._v("lock.lockInterruptibly()")]),t._v("来争抢锁，否则无法中断线程")]),t._v(" "),a("p",[a("code",[t._v("Condition")]),t._v("是"),a("code",[t._v("ReentrantLock")]),t._v("中的一个功能点，其作用是配合"),a("code",[t._v("Lock")]),t._v("使用可以达到"),a("code",[t._v("wait")]),t._v("/"),a("code",[t._v("notify")]),t._v("相同的作用，并且可以更加精确地控制唤醒某个具体线程（底层是"),a("code",[t._v("park")]),t._v("/"),a("code",[t._v("unPark")]),t._v("机制）。")]),t._v(" "),a("p",[t._v("假设现在有个容器，并且有两个线程，分别是生产者线程和消费者线程，当容器里没东西的时候消费者线程则进入阻塞等待，当生产者生产完东西时，唤醒消费者线程进行消费，反之当容器满的时候生产者阻塞，当有空余位置时，消费者唤醒生产者去继续生产")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),t._v(" lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者对应的条件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" producerCondition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者对应的条件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" consumerCondition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者如果发现容器空了，则进入对应的条件阻塞")]),t._v("\nconsumerCondition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者生产完东西放入容器后，唤醒消费者消费")]),t._v("\nconsumerCondition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者发现容器满了，则进入对应的条件阻塞")]),t._v("\nproducerCondition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者消费完，通知生产者继续生产")]),t._v("\nproducerCondition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"readwritelock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readwritelock"}},[t._v("#")]),t._v(" ReadWriteLock")]),t._v(" "),a("p",[a("code",[t._v("ReadWriteLock")]),t._v("是一个读写锁的接口，其典型实现为"),a("code",[t._v("ReentrantReadWriteLock")]),t._v("，读写锁实际是维护一对关联锁，一个只用于读操作，一个用于写操作，读锁是一个共享锁，可以由多个线程同时持有，而写锁是排他锁")]),t._v(" "),a("p",[t._v("当所有的读操作完成时，才会进行加写锁操作。适用于读取比写入多的场景，例如：缓存")]),t._v(" "),a("p",[t._v("在读写锁中有一个"),a("code",[t._v("锁降级")]),t._v("的概念，指把写锁降级为读锁。把持住当前拥有的写锁同时，再获取到读锁，随后释放写锁的过程。")]),t._v(" "),a("p",[t._v("我们可以看到在"),a("code",[t._v("ReentrantReadWriteLock")]),t._v("中，同时维护了读锁和写锁")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Inner class providing readlock */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantReadWriteLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadLock")]),t._v(" readerLock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Inner class providing writelock */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantReadWriteLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WriteLock")]),t._v(" writerLock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);